" Vim-Plugin 

" ----- auto-pairs -----
let g:AutoPairsFlyMode = 1
let g:AutoPairsShortcutBackInsert = '<M-b>'

" ----- ale -----
let g:ale_set_signs = 1
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_echo_msg_error_str = 'Error'
let g:ale_echo_msg_warning_str = 'Warning'
let g:ale_completion_enabled = 0

" Linters
let g:ale_linters = {
\   'css': ['stylelint'],
\   'html': ['htmlhint'],
\   'javascript': ['eslint'],
\   'json': ['jq'],
"\   'java': ['checkstyle','javac'],  #use coc-java instead
\   'markdown': ['markdownlint'],
\   'python': ['pylint'],
\   'yaml': ['yq'],
\}

" Formatters Allowed
let g:ale_fixers = {
\   'javascript': ['prettier'],
\   'java': ['google_java_format'],
\   'json': ['prettier'],
\   'markdown': ['prettier'],
\   'python': ['yapf'],
\   'yaml': ['yq'],
\}

" Fix / Linter files on save
let g:ale_fix_on_save = 1 
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_save = 1

" Java linter config: checkstyle
let g:ale_java_checkstyle_config = '~/.config/google-java-style.xml'

" Jump to the next/previous error
nnoremap <silent> ]e <Plug>(ale_next_error)
nnoremap <silent> [e <Plug>(ale_previous_error)

" Jump to the next/previous warning
nnoremap <silent> ]w <Plug>(ale_next_warning)
nnoremap <silent> [w <Plug>(ale_previous_warning)

" Jump to the next/previous diagnostic (error or warning)
nnoremap <silent> ]d <Plug>(ale_next_wrap)
nnoremap <silent> [d <Plug>(ale_previous_wrap)

" Automatically fix issues in the current buffer.
nnoremap <Leader><Leader>f :ALEFix<CR>

" Automatically lint issues in the current buffer.
nnoremap <Leader><Leader>l :ALELint<CR>

" Toggle ALE linting globally (on/off)
nnoremap <Leader><Leader>t :ALEToggle<CR>

" Toggle ALE linting for the current buffer (on/off)
" <Leader><Leader>T (uppercase T) for "Toggle buffer"
nnoremap <Leader><Leader>T :ALEToggleBuffer<CR>

" Show ALE information (useful for debugging and seeing active linters)
" <Leader><Leader>i for "info"
nnoremap <Leader><Leader>i :ALEInfo<CR>

" Clear diagnostics for current buffer
nnoremap <Leader><Leader>C :ALEReset<CR>
" Clear diagnostics for all buffers
nnoremap <Leader><Leader>A :ALEResetBuffer<CR> 

" ----- ag / ack.vim -----
nnoremap <Leader>A :Ack!<Space>
command -nargs=+ Gag Gcd | Ack! <args>
nnoremap K :Gag "\b<C-R><C-W>\b"<CR>:cw<CR>
if executable('ag')
    let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
    let g:ackprg = 'ag --vimgrep'
endif

"----- argwrap -----
nnoremap <Leader>w :ArgWrap<CR>

"----- buffergator -----
let g:buffergator_suppress_keymaps = 1
nnoremap <Leader>b :BuffergatorToggle<CR>

"----- ctrlp -----
nnoremap ; :CtrlPBuffer<CR>
let g:ctrlp_switch_buffer = 0
let g:ctrlp_show_hidden = 1
let g:ctrlp_regexp = 1

" ----- emmet -----
" enable globally for any filetype.
let g:user_emmet_mode='inv'
let g:user_emmet_leader_key=','
let g:user_emmet_settings = webapi#json#decode(
\    join(readfile(expand('~/.config/emmet/snippets_custom.json')), "\n")
\)
let g:user_emmet_install_global = 0
autocmd FileType html,css,markdown,xml,xsl,scss,sass EmmetInstall

"----- easymotion -----
map <Leader> <Plug>(easymotion-prefix)

"----- fugitive -----
set tags^=.git/tags;~

"----- gundo -----
nnoremap <Leader>u :GundoToggle<CR>
if has('python3')
    let g:gundo_prefer_python3 = 1
endif

"----- incsearch -----
map / <Plug>(incsearch-forward)
map ? <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

"----- incsearch-easymotion -----
map z/ <Plug>(incsearch-easymotion-/)
map z? <Plug>(incsearch-easymotion-?)
map zg/ <Plug>(incsearch-easymotion-stay)

"----- nerdtree -----
nnoremap <Leader>n :NERDTreeToggle<CR>
nnoremap <Leader>f :NERDTreeFind<CR>

" exit vim if NERDTree is the only window left.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 
    \ && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

"----- vim-markdown -----
let g:markdown_fenced_languages = [
    \ 'bash=sh',
    \ 'c',
    \ 'coffee',
    \ 'erb=eruby',
    \ 'javascript',
    \ 'json',
    \ 'perl',
    \ 'python',
    \ 'ruby',
    \ 'yaml',
    \ 'go',
    \ 'racket',
    \ 'haskell',
\]
let g:markdown_syntax_conceal = 0
let g:markdown_folding = 1
let g:vim_markdown_math = 1

" ultisnips
" Trigger configuration.
" You need to change this to something other than <tab>
" if you use one of the following:
" " - https://github.com/Valloric/YouCompleteMe
" " - https://github.com/nvim-lua/completion-nvim
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" ----- vim-over -----
noremap <Leader>x :OverCommandLine<CR>

" ----- coc-nvim -----
"  Conquer of Completion
"
let g:coc_global_extensions = [
\ 'coc-json',
\ 'coc-git',
\ 'coc-html',
\ 'coc-java',
\ 'coc-tsserver',
\ 'coc-diagnostic',
\ 'coc-pairs',
\ 'coc-clangd',
\]

" make <cr> select the first completion item and confirm
" the completion when no item has been selected
"inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent><nowait> [g <Plug>(coc-diagnostic-prev)
nmap <silent><nowait> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent><nowait> gd <Plug>(coc-definition)
nmap <silent><nowait> gy <Plug>(coc-type-definition)
nmap <silent><nowait> gi <Plug>(coc-implementation)
nmap <silent><nowait> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s)
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
augroup end

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nmap <leader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
