"---------------------
" VIM-Plugin configuration
"---------------------

" ----- ale -----
let g:ale_set_signs = 1
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_echo_msg_error_str = 'Error'
let g:ale_echo_msg_warning_str = 'Warning'
let g:ale_completion_enabled = 0

" Linters per filetype
let g:ale_linters = {
\   'css': ['stylelint'],
\   'html': ['htmlhint'],
\   'javascript': ['eslint'],
\   'json': ['jq'],
\   'markdown': ['markdownlint'],
\   'python': ['pylint'],
\   'yaml': ['yq'],
\}

" Fixers / Formatters per filetype
let g:ale_fixers = {
\   'javascript': ['prettier'],
\   'json': ['prettier'],
\   'python': ['yapf'],
\   'yaml': ['yq'],
\}

" Fix files on save (Requires fixers configured above)
let g:ale_fix_on_save = 1 
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_save = 1

" Jump to the next/previous error
nnoremap <silent> ]e <Plug>(ale_next_error)
nnoremap <silent> [e <Plug>(ale_previous_error)

" Jump to the next/previous warning
nnoremap <silent> ]w <Plug>(ale_next_warning)
nnoremap <silent> [w <Plug>(ale_previous_warning)

" Jump to the next/previous diagnostic (error or warning)
nnoremap <silent> ]d <Plug>(ale_next_wrap)
nnoremap <silent> [d <Plug>(ale_previous_wrap)

" Automatically fix issues in the current buffer.
nnoremap <Leader><Leader>f :ALEFix<CR>

" Automatically lint issues in the current buffer.
nnoremap <Leader><Leader>l :ALELint<CR>

" Toggle ALE linting globally (on/off)
nnoremap <Leader><Leader>t :ALEToggle<CR>

" Toggle ALE linting for the current buffer (on/off)
" <Leader><Leader>T (uppercase T) for "Toggle buffer"
nnoremap <Leader><Leader>T :ALEToggleBuffer<CR>

" Show ALE information (useful for debugging and seeing active linters)
" <Leader><Leader>i for "info"
nnoremap <Leader><Leader>i :ALEInfo<CR>

" Clear diagnostics for current buffer
nnoremap <Leader><Leader>C :ALEReset<CR>
" Clear diagnostics for all buffers
nnoremap <Leader><Leader>A :ALEResetBuffer<CR> 

" ----- ag / ack.vim -----
nnoremap <Leader>a :Ack!<Space>
command -nargs=+ Gag Gcd | Ack! <args>
nnoremap K :Gag "\b<C-R><C-W>\b"<CR>:cw<CR>
if executable('ag')
    let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
    let g:ackprg = 'ag --vimgrep'
endif

"----- argwrap -----
nnoremap <Leader>w :ArgWrap<CR>

"----- buffergator -----
let g:buffergator_suppress_keymaps = 1
nnoremap <Leader>b :BuffergatorToggle<CR>

"----- ctrlp -----
nnoremap ; :CtrlPBuffer<CR>
let g:ctrlp_switch_buffer = 0
let g:ctrlp_show_hidden = 1
let g:ctrlp_regexp = 1

" ----- emmet -----
" enable globally for any filetype.
let g:user_emmet_mode='inv'
let g:user_emmet_leader_key=','
let g:user_emmet_settings = webapi#json#decode(
\    join(readfile(expand('~/.config/emmet/snippets_custom.json')), "\n")
\)
let g:user_emmet_install_global = 0
autocmd FileType html,css,markdown,xml,xsl,scss,sass EmmetInstall

"----- easymotion -----
map <Space> <Plug>(easymotion-prefix)

"----- fugitive -----
set tags^=.git/tags;~

"----- gundo -----
nnoremap <Leader>u :GundoToggle<CR>
if has('python3')
    let g:gundo_prefer_python3 = 1
endif

"----- incsearch -----
map / <Plug>(incsearch-forward)
map ? <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

"----- incsearch-easymotion -----
map z/ <Plug>(incsearch-easymotion-/)
map z? <Plug>(incsearch-easymotion-?)
map zg/ <Plug>(incsearch-easymotion-stay)

"----- nerdtree -----
nnoremap <Leader>n :NERDTreeToggle<CR>
nnoremap <Leader>f :NERDTreeFind<CR>

" exit vim if NERDTree is the only window left.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 
    \ && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

"----- vim-markdown -----
let g:markdown_fenced_languages = [
    \ 'bash=sh',
    \ 'c',
    \ 'coffee',
    \ 'erb=eruby',
    \ 'javascript',
    \ 'json',
    \ 'perl',
    \ 'python',
    \ 'ruby',
    \ 'yaml',
    \ 'go',
    \ 'racket',
    \ 'haskell',
\]
let g:markdown_syntax_conceal = 0
let g:markdown_folding = 1

" ultisnips
" Trigger configuration.
" You need to change this to something other than <tab>
" if you use one of the following:
" " - https://github.com/Valloric/YouCompleteMe
" " - https://github.com/nvim-lua/completion-nvim
let g:UltiSnipsExpandTrigger="<S-tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" ----- vim-over -----
noremap <Leader>x :OverCommandLine<CR>
